version: "3.9"

services:
    postgres:
        image: postgres:17
        container_name: "postgres"
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
        volumes:
            - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
            - postgres_data:/var/lib/postgresql/data
        networks:
            - netuworku
        ports:
            - "5432:5432"

        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            interval: 10s
            timeout: 5s
            retries: 5
    
    qa_score:
        build: "./qa_score"
        container_name: "qa_score"
        environment:
            - GOOGLE_API_KEY_1=${GOOGLE_API_KEY_1}
            - GOOGLE_API_KEY_2=${GOOGLE_API_KEY_2}
            - GOOGLE_API_KEY_3=${GOOGLE_API_KEY_3}
        volumes:
            - ./qa_score:/app  
            - qa_score_data:/data/qa_score_data
        networks:
            - netuworku
        ports:
            - "8000:8000"
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
            interval: 11s
            timeout: 5s
            retries: 5
    middleware_server:
        build: "./middleware_server"
        container_name: "middleware_server"
        environment:
            - POSTGRES_HOST=${POSTGRES_HOST}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_PORT=5432
        
        volumes:
            - ./middleware_server:/app
            - middleware_server_data:/data/middleware_server_data
            - ./tests.py:/app/tests.py
        networks:
            - netuworku
        ports:
            - "8075:8075"
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8075/health"]
            interval: 10s
            timeout: 5s
            retries: 5

        depends_on:
            postgres:
                condition: service_healthy
            qa_score:
                condition: service_healthy
            redis_1:
                condition: service_healthy
            redis_2:
                condition: service_healthy
            redis_3:
                condition: service_healthy
            redis_4:
                condition: service_healthy
            redis_5:
                condition: service_healthy
            redis_6:
                condition: service_healthy
    redisinsight:
        image: redislabs/redisinsight:2.70
        container_name: redisinsight
        restart: always
        ports:
            - "5540:5540"
        networks:
            - netuworku
        volumes:
            - redisinsight_data:/data
        depends_on:
            middleware_server:
                condition: service_healthy


    generator:
        build: "./generator"
        container_name: "generator"
        volumes:
            - ./generator:/app
            - generator_data:/data/generator_data
        networks:
            - netuworku
        depends_on:
            middleware_server:
                condition: service_healthy

    redis_1:
        image: redis:8.2.1
        container_name: "redis_1_gauss_lru_2mb"
        volumes:
            - ./cache/redis_1.conf:/usr/local/etc/redis/redis.conf
            
        command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
        networks:
            - netuworku
        ports:
            - "6379:6379"
        healthcheck:
            test: ["CMD", "redis-cli", "-p", "6379", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5

    redis_2:
        image: redis:8.2.1
        container_name: "redis_2_gauss_lru_5mb"
        volumes:
            - ./cache/redis_2.conf:/usr/local/etc/redis/redis.conf
            
        command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
        networks:
            - netuworku
        ports:
            - "6380:6380"
        healthcheck:
            test: ["CMD", "redis-cli", "-p", "6380", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5    
    redis_3:
        image: redis:8.2.1
        container_name: "redis_3_gauss_lru_10mb"
        volumes:
            - ./cache/redis_3.conf:/usr/local/etc/redis/redis.conf
            
        command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
        networks:
            - netuworku
        ports:
            - "6381:6381"
        healthcheck:
            test: ["CMD", "redis-cli", "-p", "6381", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5    

    redis_4:
        image: redis:8.2.1
        container_name: "redis_4_gauss_lfu_2mb"
        volumes:
            - ./cache/redis_4.conf:/usr/local/etc/redis/redis.conf
            
        command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
        networks:
            - netuworku
        ports:
            - "6382:6382"
        healthcheck:
            test: ["CMD", "redis-cli", "-p", "6382", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5

    redis_5:
        image: redis:8.2.1
        container_name: "redis_5_gauss_lfu_5mb"
        volumes:
            - ./cache/redis_5.conf:/usr/local/etc/redis/redis.conf
        command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
        networks:
            - netuworku
        ports:
            - "6383:6383"
        healthcheck:
            test: ["CMD", "redis-cli", "-p", "6383", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5    

    redis_6:
        image: redis:8.2.1
        container_name: "redis_6_gauss_lfu_10mb"
        volumes:
            - ./cache/redis_6.conf:/usr/local/etc/redis/redis.conf
        command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
        networks:
            - netuworku
        ports:
            - "6384:6384"
        healthcheck:
            test: ["CMD", "redis-cli", "-p", "6384", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5    


volumes:
  qa_score_data:
  generator_data:
  postgres_data:
  middleware_server_data:
  redisinsight_data:
  
networks:
   netuworku:
      driver: bridge
